# This code prepares data from Dimensions, SHERPA RoMEO and ESAC to be used for analysing open access policies. It is not currently complete.

#library(readr)
library(tidyverse)
library(openxlsx)

setwd("C:\\Users\\TKen02\\UKRI\\Policy Analysis - Documents\\Open Access\\Projects\\Publication Venue Gap Analysis\\Data")

# 1. PREPARING DIMENSIONS DATA
  # NB. This data was downloaded using the Dimensions API plugin for google sheets, with query: "search publications where year in [2018:2018] and funders in ["grid.8682.4", "grid.14105.31", "grid.14467.30", "grid.418100.c", "grid.421091.f", "grid.423443.6", "grid.426413.6", "grid.434257.3", "grid.453088.2", "grid.496779.2"] and type in ["article"] return publications[type + category_uoa + date + dimensions_url + doi + funder_countries + funders + issn + journal + journal_lists + linkout + open_access_categories + publisher + research_org_countries + research_org_country_names + supporting_grant_ids + title  + year]"

# dimensions <- read_csv("Dimensions_orig.csv")
dimensions <- read_csv("Dimensions data.csv")
  
  # renaming values in categories_uoa
    dimensions$category_uoa <- substr(dimensions$category_uoa, 24, nchar(dimensions$category_uoa)-3)
    
  # renaming values in research_org_country_names
    dimensions$research_org_country_names <- gsub("\\[\"", "", dimensions$research_org_country_names)
    dimensions$research_org_country_names <- gsub("\",\"", ", ", dimensions$research_org_country_names)
    dimensions$research_org_country_names <- gsub("\"\\]", "", dimensions$research_org_country_names)
    
  # renaming values in funders
    
    
  # renaming values in open_access_categories
  
           
  # creating derived value for ref_panel (so we can do analysis at the level of REF panel rather than individual REF units of assessment/ disciplines).
    dimensions$ref_panel <- NA
    dimensions$ref_panel <- substr(dimensions$category_uoa,1,1)
    
  # remove one article which doesn't have a DOI or ISSN
    dimensions <- dimensions[!is.na(dimensions$issn), ]

  # returning only first ISSN in format "XXXX-XXXX"
    dimensions$issn1 <- dimensions$issn
    dimensions$issn1 <- substr(dimensions$issn1, 3, 11)
    
  # new column for number of articles linked to that publisher


  # removing unneccessary columns
    dimensions <- dimensions[,!(names(dimensions) %in% c("funder_countries","journal_id", "journal_lists", "research_org_countries", "supporting_grant_ids", "type", "year"))]
    
  # changing column order (if any new columns added they will need to be added here)
    col_order <- (c("title", "date", "journal_title", "publisher", "issn", "issn1", "doi", "category_uoa", "ref_panel", "open_access_categories", "funders", "linkout", "research_org_country_names"))
    dimensions <- dimensions[, col_order]



###########
# 2. DOWNLOADING AND PREPARING ESAC DATA
  # NB. ESAC data can be downloaded from https://esac-initiative.org/about/transformative-agreements/agreement-registry/. 

  # Download ESAC data
  
  # Select only JISC-negotiated deals
  
  # Rename 'publisher' names to match Dimensions data



###########
# 3. PREPARING SHERPA ROMEO DATA
  # NB. See 'Sherpa Romeo API and filtering for how to download this data'
  # NB2. We were advised by JISC that missing data should be interpreted as 'no requirement' which means missing is actually equivalent to the most permissive policy option.
  
sherpa <- read.xlsx("sherpa_all_policies.xlsx")

# rename title and id to avoid confusion with title in Dimensions
sherpa <- as_tibble(sherpa) %>%
  rename(j_title = title, sherpa_id = id)

# recode embargo.amount to months where embargo.unit != 'months'


# Remove unnecessary columns
sherpa <- sherpa[,!(names(sherpa) %in% c("issn_NA","issn_legacy", "name", "pubpol_id"))]

# Remove policies relating to submitted articles
#####sherpa <- sherpa[, !'article_version'['submitted'']]

  # Select first policy only (as basic info is same for all policies)
sherpa <-   sherpa[!duplicated(sherpa$sherpa_id, incomparables = NA), ]

  # Remove duplicated rows
    # On issn_print
sherpa <- sherpa[!duplicated(sherpa$issn_print, incomparables = NA), ]
sherpa <- sherpa[!duplicated(sherpa$issn_electronic, incomparables = NA), ]
sherpa <- sherpa[!duplicated(sherpa$j_title, incomparables = NA), ]  

  # Create new column recoding license into CC-BY, CC-BY-ND, CC-BY-SA and license_not_compliant (return missing data as CC-BY(m))


  # Create new column recoding repository into compliant and not compliant 
    # compliant = any of (any_website, any_repository, institutional_repository, non_commericial_institutional_repository, non_commercial_repository, non_commercial_subject_repository, subject_repository, non_commerical_website, funder_designated_location, preprint_repository)
    # not_compliant = has only (authors_homepage, institutional website, academic social network, institutional website)
    
  # Create new column to rank Green OA policies
  
      # Select only policies where additional_oa_fee = no AND listed_in_doaj = no
        sherpa_green <- filter(sherpa, additional_oa_fee != "yes")
        sherpa_green <- filter(sherpa, listed_in_doaj != "yes")

      # Create column 'rank' to rank policies from most to least permissive
      
  
###########
# 4. LEFT-JOINING ESAC INTO DIMENSIONS MATCHING ON 'PUBLISHER'
  # NB The csv below was downloaded to and formatted in Excel as I didn't do the R code for it yet.

esac <- read_csv("ESAC 23.09.20 (for merging with Dimensions).csv")

merged_pvga <- left_join(dimensions, esac, by = c("publisher" = "publisher"))



###########
# 5. LEFT-JOINING SHERPA INTO MERGED DIMENSIONS-ESAC
  # NB. There is no one column that has sufficient overlap so three left-joins are needed (on journal_title, issn_print, and issn_electronic) 
  
  # Left_join merged_pvga and sherpa on each of 3 matches
merged_pvga <- left_join(merged_pvga, sherpa[ , c("issn_print", "issn_electronic", "j_title", "sherpa_id", "listed_in_doaj", "open_access_prohibited")], by = c("issn1" = "issn_print"), suffix=c("","x"))
merged_pvga <- left_join(merged_pvga, sherpa[ , c("issn_print", "issn_electronic", "j_title", "sherpa_id", "listed_in_doaj", "open_access_prohibited")], by = c("issn1" = "issn_electronic"), suffix=c("","y"))
merged_pvga <- left_join(merged_pvga, sherpa[ , c("issn_print", "issn_electronic", "j_title", "sherpa_id", "listed_in_doaj", "open_access_prohibited")], by = c("journal_title" = "j_title"), suffix=c("","z"))

  # Functions to help merge duplicate columns
replace_na_with_blank <- function(df, varnames) {
  for (varname in varnames) {
    df[is.na(df[[varname]]), varname] <- ""
  }
  return(df)
}

concat_columns <- function(df, v1, v2) {
  idx_na <- df[[v1]]==""
  df[[v1]][idx_na] <- paste(df[[v1]][idx_na], df[[v2]][idx_na], sep='') 
  df[[v2]] <- NULL
  return(df)
}

    # Convert sherpa_id to character as one of the functions doesn't work on numeric
merged_pvga$sherpa_id <- as.character(merged_pvga$sherpa_id)
merged_pvga$sherpa_idy <- as.character(merged_pvga$sherpa_idy)
merged_pvga$sherpa_idz <- as.character(merged_pvga$sherpa_idz)

# Start clearing duplicates using above functions
merged_pvga = replace_na_with_blank(merged_pvga, c("j_title", "j_titley", "sherpa_id", "sherpa_idy", "sherpa_idz", "listed_in_doaj", "listed_in_doajy", "listed_in_doajz", "open_access_prohibited", "open_access_prohibitedy", "open_access_prohibitedz", "issn_print", "issn_printz", "issn_electronic", "issn_electronicz"))
merged_pvga <- concat_columns(merged_pvga, "j_title","j_titley")
merged_pvga <- concat_columns(merged_pvga, "sherpa_id","sherpa_idy")
merged_pvga <- concat_columns(merged_pvga, "sherpa_id","sherpa_idz")
merged_pvga <- concat_columns(merged_pvga, "listed_in_doaj","listed_in_doajy")
merged_pvga <- concat_columns(merged_pvga, "listed_in_doaj","listed_in_doajz")
merged_pvga <- concat_columns(merged_pvga, "open_access_prohibited","open_access_prohibitedy")
merged_pvga <- concat_columns(merged_pvga, "open_access_prohibited","open_access_prohibitedz")
merged_pvga <- concat_columns(merged_pvga, "issn_print","issn_printz")
merged_pvga <- concat_columns(merged_pvga, "issn_electronic", "issn_electronicz")

############
6. WRITE MERGED_PVGA TO EXCEL

openxlsx::write.xlsx(as.data.frame(merged_pvga), 'merged_pvga.xlsx')
